name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/event-starter-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository for deployment files
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create deployment directory
            mkdir -p ~/event-starter-frontend
            cd ~/event-starter-frontend
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,nginx.conf,debug-ssl.sh"
          target: "~/event-starter-frontend/"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/event-starter-frontend
            
            # Make debug script executable
            chmod +x debug-ssl.sh
            
            # Convert repository name to lowercase for Docker
            REPO="${{ github.repository_owner }}/event-starter-frontend"
            REPO_LOWER=$(echo $REPO | tr '[:upper:]' '[:lower:]')
            
            # Update docker-compose.yml to use the built image instead of building locally
            sed -i "s|build:|# build:|g" docker-compose.yml
            sed -i "s|context: \.|# context: \.|g" docker-compose.yml
            sed -i "s|dockerfile: Dockerfile|# dockerfile: Dockerfile|g" docker-compose.yml
            sed -i "/container_name: event-starter-frontend/i \ \ \ \ image: ${{ env.REGISTRY }}/$REPO_LOWER:main" docker-compose.yml
            
            # Stop any existing containers that might be using port 80/443
            docker stop frontend-app || true
            docker rm frontend-app || true
            
            # Pull the latest images
            docker-compose pull
            
            # Stop and remove old containers
            docker-compose down || true
            
            # Start the new deployment
            docker-compose up -d
            
            # Wait a moment for services to start
            sleep 10
            
            # Check deployment status
            echo "=== Deployment Status ==="
            docker-compose ps
            
            # Check nginx logs for any errors
            echo "=== Nginx Logs ==="
            docker-compose logs nginx --tail=20
            
            # Clean up old images
            docker image prune -f 
